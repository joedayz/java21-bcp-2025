package com.bcp.testlogging;

import java.util.logging.*;

public class Test {
    private static Logger logger = Logger.getLogger(com.bcp.testlogging.Test.class.getName());

    public static void main(String[] args) {
        System.out.println("=== JAVA LOGGING API - EJEMPLO COMPLETO ===");
        System.out.println("Este ejemplo demuestra el uso de la API de Logging de Java");
        System.out.println();

        // ========================================
        // 1. CONFIGURACI√ìN B√ÅSICA DEL LOGGER
        // ========================================
        System.out.println("=== 1. CONFIGURACI√ìN B√ÅSICA DEL LOGGER ===");
        System.out.println("Logger creado con el nombre de la clase: " + logger.getName());
        System.out.println("Nivel actual del logger: " + logger.getLevel());
        System.out.println();

        // ========================================
        // 2. EJEMPLO DE LOGGING CON EXCEPCIONES
        // ========================================
        System.out.println("=== 2. LOGGING CON EXCEPCIONES ===");
        System.out.println("Demostrando logger.log(Level.SEVERE, \"Your error message\", e)");
        
        try {
            // Simular una operaci√≥n que puede lanzar una excepci√≥n
            System.out.println("Intentando una operaci√≥n que puede fallar...");
            int result = 10 / 0; // Esto lanzar√° una ArithmeticException
        } catch (Exception e) {
            logger.log(Level.SEVERE, "Error en operaci√≥n matem√°tica", e);
            System.out.println("‚úÖ Excepci√≥n capturada y loggeada correctamente");
        }
        System.out.println();

        // ========================================
        // 3. LOGGING DE INFORMACI√ìN
        // ========================================
        System.out.println("=== 3. LOGGING DE INFORMACI√ìN ===");
        System.out.println("Demostrando logger.log(Level.INFO, \"Your message\")");
        
        logger.log(Level.INFO, "Aplicaci√≥n iniciada correctamente");
        System.out.println("‚úÖ Mensaje de INFO loggeado");
        System.out.println();

        // ========================================
        // 4. M√âTODO CONVENIENCIA info()
        // ========================================
        System.out.println("=== 4. M√âTODO CONVENIENCIA info() ===");
        System.out.println("Demostrando logger.info(\"Your message\")");
        
        logger.info("Procesamiento completado exitosamente");
        System.out.println("‚úÖ Mensaje loggeado con m√©todo conveniencia");
        System.out.println();

        // ========================================
        // 5. DEMOSTRACI√ìN DE TODOS LOS NIVELES
        // ========================================
        System.out.println("=== 5. DEMOSTRACI√ìN DE TODOS LOS NIVELES ===");
        System.out.println("Hay siete niveles de logging que permiten registrar diferentes niveles de severidad:");
        System.out.println();

        // SEVERE (m√°s cr√≠tico)
        logger.severe("üö® ERROR CR√çTICO: La aplicaci√≥n no puede continuar");
        
        // WARNING
        logger.warning("‚ö†Ô∏è ADVERTENCIA: Recursos del sistema bajos");
        
        // INFO
        logger.info("‚ÑπÔ∏è INFORMACI√ìN: Usuario autenticado correctamente");
        
        // CONFIG
        logger.config("‚öôÔ∏è CONFIGURACI√ìN: Configuraci√≥n de base de datos cargada");
        
        // FINE
        logger.fine("üîç FINE: Detalle de depuraci√≥n - M√©todo X ejecutado");
        
        // FINER
        logger.finer("üî¨ FINER: Detalle m√°s espec√≠fico - Variable Y = 42");
        
        // FINEST (menos cr√≠tico)
        logger.finest("üî¨ FINEST: Detalle m√°s granular - Iteraci√≥n 15 completada");
        
        System.out.println("‚úÖ Todos los niveles de logging demostrados");
        System.out.println();

        // ========================================
        // 6. EJEMPLOS PR√ÅCTICOS
        // ========================================
        System.out.println("=== 6. EJEMPLOS PR√ÅCTICOS ===");

        // Ejemplo: Logging de operaciones de base de datos
        System.out.println("Ejemplo: Logging de operaciones de base de datos");
        try {
            logger.info("Iniciando conexi√≥n a base de datos...");
            // Simular operaci√≥n de BD
            Thread.sleep(100);
            logger.info("Conexi√≥n a base de datos establecida");
            
            logger.fine("Ejecutando consulta SELECT * FROM users");
            // Simular consulta
            Thread.sleep(50);
            logger.info("Consulta ejecutada exitosamente - 150 registros encontrados");
            
        } catch (InterruptedException e) {
            logger.log(Level.SEVERE, "Error en operaci√≥n de base de datos", e);
        }
        System.out.println();

        // Ejemplo: Logging de autenticaci√≥n
        System.out.println("Ejemplo: Logging de autenticaci√≥n");
        String username = "usuario123";
        logger.info("Intento de autenticaci√≥n para usuario: " + username);
        
        // Simular autenticaci√≥n
        boolean authSuccess = true; // Simular √©xito
        if (authSuccess) {
            logger.info("Autenticaci√≥n exitosa para usuario: " + username);
        } else {
            logger.warning("Autenticaci√≥n fallida para usuario: " + username);
        }
        System.out.println();

        // Ejemplo: Logging de rendimiento
        System.out.println("Ejemplo: Logging de rendimiento");
        long startTime = System.currentTimeMillis();
        
        // Simular operaci√≥n costosa
        try {
            Thread.sleep(200);
        } catch (InterruptedException e) {
            logger.log(Level.SEVERE, "Operaci√≥n interrumpida", e);
        }
        
        long endTime = System.currentTimeMillis();
        long duration = endTime - startTime;
        
        if (duration > 100) {
            logger.warning("Operaci√≥n lenta detectada: " + duration + "ms");
        } else {
            logger.fine("Operaci√≥n completada en tiempo normal: " + duration + "ms");
        }
        System.out.println();

        // ========================================
        // 7. CONFIGURACI√ìN DE NIVELES
        // ========================================
        System.out.println("=== 7. CONFIGURACI√ìN DE NIVELES ===");
        
        // Mostrar configuraci√≥n actual
        System.out.println("Configuraci√≥n actual del logger:");
        System.out.println("  - Nivel del logger: " + logger.getLevel());
        System.out.println("  - Nivel de los handlers: " + getHandlersLevel(logger));
        System.out.println();

        // Cambiar nivel del logger para ver m√°s mensajes
        System.out.println("Cambiando nivel del logger a FINE para ver m√°s detalles...");
        logger.setLevel(Level.FINE);
        
        // Ahora los mensajes FINE ser√°n visibles
        logger.fine("Este mensaje FINE ahora ser√° visible");
        logger.finer("Este mensaje FINER tambi√©n ser√° visible");
        System.out.println("‚úÖ Nivel cambiado y mensajes de depuraci√≥n visibles");
        System.out.println();

        // ========================================
        // 8. RESUMEN
        // ========================================
        System.out.println("=== RESUMEN ===");
        System.out.println("‚úÖ Logger configurado correctamente con nombre de clase");
        System.out.println("‚úÖ Logging de excepciones demostrado");
        System.out.println("‚úÖ Logging de informaci√≥n demostrado");
        System.out.println("‚úÖ M√©todo conveniencia info() demostrado");
        System.out.println("‚úÖ Todos los siete niveles de logging demostrados");
        System.out.println("‚úÖ Ejemplos pr√°cticos implementados");
        System.out.println("‚úÖ Configuraci√≥n de niveles demostrada");
        System.out.println();
        System.out.println("üéØ La API de Logging de Java proporciona un sistema robusto");
        System.out.println("   para registrar eventos y depurar aplicaciones.");
    }
    
    // M√©todo auxiliar para obtener el nivel de los handlers
    private static String getHandlersLevel(Logger logger) {
        Handler[] handlers = logger.getHandlers();
        if (handlers.length == 0) {
            return "Sin handlers configurados (usa configuraci√≥n del logger padre)";
        }
        StringBuilder levels = new StringBuilder();
        for (Handler handler : handlers) {
            levels.append(handler.getLevel()).append(", ");
        }
        return levels.substring(0, levels.length() - 2);
    }
} 