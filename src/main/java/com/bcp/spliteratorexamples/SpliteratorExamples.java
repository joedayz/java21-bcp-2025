package com.bcp.spliteratorexamples;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.Spliterator;

public class SpliteratorExamples {
    public static void main(String[] args) {
        System.out.println("=== SPLITERATOR: C√ìMO FUNCIONAN LOS M√âTODOS ===");
        System.out.println("Spliterator es un iterador especializado para procesamiento paralelo.");
        System.out.println();

        // ========================================
        // 1. EJEMPLO B√ÅSICO: Crear un Spliterator
        // ========================================
        System.out.println("=== 1. CREAR UN SPLITERATOR ===");
        
        // Crear una lista de productos
        List<Product> products = Arrays.asList(
            new Product("Laptop", BigDecimal.valueOf(1200.0), "Electr√≥nica"),
            new Product("Mouse", BigDecimal.valueOf(25.0), "Electr√≥nica"),
            new Product("Keyboard", BigDecimal.valueOf(80.0), "Electr√≥nica"),
            new Product("Monitor", BigDecimal.valueOf(300.0), "Electr√≥nica"),
            new Product("Headphones", BigDecimal.valueOf(150.0), "Electr√≥nica"),
            new Product("Coffee", BigDecimal.valueOf(5.0), "Bebida"),
            new Product("Tea", BigDecimal.valueOf(3.0), "Bebida"),
            new Product("Pizza", BigDecimal.valueOf(12.0), "Comida")
        );

        System.out.println("Lista original:");
        products.forEach(p -> System.out.println("  - " + p.getName() + ": $" + p.getPrice()));
        System.out.println();

        // Crear un Spliterator de la lista
        Spliterator<Product> spliterator = products.spliterator();
        System.out.println("Spliterator creado con " + spliterator.estimateSize() + " elementos");
        System.out.println();

        // ========================================
        // 2. M√âTODO tryAdvance() - PASO A PASO
        // ========================================
        System.out.println("=== 2. M√âTODO tryAdvance() - PASO A PASO ===");
        System.out.println("tryAdvance() es una alternativa a hasNext() + next() del Iterator");
        System.out.println("Devuelve true si hay un elemento, false si no hay m√°s elementos");
        System.out.println();

        // Crear un nuevo Spliterator para el ejemplo
        Spliterator<Product> s1 = products.spliterator();

        System.out.println("Estado inicial del Spliterator:");
        System.out.println("  - Elementos restantes: " + s1.estimateSize());
        System.out.println();

        // Usar tryAdvance para procesar elementos uno por uno
        System.out.println("Procesando elementos con tryAdvance():");

        int count = 0;
        while (s1.tryAdvance(product -> {
            System.out.println("  Procesando: " + product.getName() + " (Precio: $" + product.getPrice() + ")");
        })) {
            count++;
            System.out.println("  ‚úÖ tryAdvance() devolvi√≥ true - Elemento procesado");
            System.out.println("  - Elementos restantes: " + s1.estimateSize());
            System.out.println();
        }

        System.out.println("‚ùå tryAdvance() devolvi√≥ false - No hay m√°s elementos");
        System.out.println("Total de elementos procesados: " + count);
        System.out.println();

        // ========================================
        // 3. M√âTODO trySplit() - DIVIDIR EL SPLITERATOR
        // ========================================
        System.out.println("=== 3. M√âTODO trySplit() - DIVIDIR EL SPLITERATOR ===");
        System.out.println("trySplit() divide el Spliterator en dos partes para procesamiento paralelo");
        System.out.println();

        // Crear un nuevo Spliterator para dividir
        Spliterator<Product> originalSpliterator = products.spliterator();

        System.out.println("Spliterator original:");
        System.out.println("  - Elementos totales: " + originalSpliterator.estimateSize());
        System.out.println();

        // Procesar el primer elemento
        System.out.println("1. Procesando el primer elemento:");
        originalSpliterator.tryAdvance(product ->
            System.out.println("  Procesado: " + product.getName()));
        System.out.println("  - Elementos restantes: " + originalSpliterator.estimateSize());
        System.out.println();

        // Intentar dividir el Spliterator
        System.out.println("2. Intentando dividir el Spliterator:");
        Spliterator<Product> s2 = originalSpliterator.trySplit();

        if (s2 == null) {
            System.out.println("  ‚ùå No se pudo dividir (s2 es null)");
            System.out.println("  - Elementos restantes en original: " + originalSpliterator.estimateSize());
        } else {
            System.out.println("  ‚úÖ Divisi√≥n exitosa");
            System.out.println("  - Elementos en s2 (nuevo): " + s2.estimateSize());
            System.out.println("  - Elementos en original: " + originalSpliterator.estimateSize());
            System.out.println();

            // Procesar elementos restantes de ambos Spliterators
            System.out.println("3. Procesando elementos restantes:");

            System.out.println("  Elementos del Spliterator original:");
            originalSpliterator.forEachRemaining(product ->
                System.out.println("    - " + product.getName() + ": $" + product.getPrice()));

            System.out.println("  Elementos del Spliterator dividido (s2):");
            s2.forEachRemaining(product ->
                System.out.println("    - " + product.getName() + ": $" + product.getPrice()));
        }
        System.out.println();

        // ========================================
        // 4. M√âTODO forEachRemaining() - PROCESAR TODO LO RESTANTE
        // ========================================
        System.out.println("=== 4. M√âTODO forEachRemaining() - PROCESAR TODO LO RESTANTE ===");
        System.out.println("forEachRemaining() es una alternativa a todo el bucle Iterator");
        System.out.println("Procesa todos los elementos restantes de una vez");
        System.out.println();

        // Crear un nuevo Spliterator
        Spliterator<Product> s3 = products.spliterator();

        System.out.println("Spliterator con " + s3.estimateSize() + " elementos");

        // Procesar algunos elementos con tryAdvance
        System.out.println("Procesando los primeros 3 elementos con tryAdvance():");
        for (int i = 0; i < 3; i++) {
            s3.tryAdvance(product ->
                System.out.println("  Procesado: " + product.getName()));
        }
        System.out.println("  - Elementos restantes: " + s3.estimateSize());
        System.out.println();

        // Procesar todos los elementos restantes con forEachRemaining
        System.out.println("Procesando todos los elementos restantes con forEachRemaining():");
        s3.forEachRemaining(product ->
            System.out.println("  Procesado: " + product.getName() + " (Categor√≠a: " + product.getCategory() + ")"));

        System.out.println("  - Elementos restantes: " + s3.estimateSize());
        System.out.println();

        // ========================================
        // 5. EJEMPLO COMPLETO: COMO EN LA IMAGEN
        // ========================================
        System.out.println("=== 5. EJEMPLO COMPLETO: COMO EN LA IMAGEN ===");
        System.out.println("Este es el ejemplo exacto que viste en la imagen:");
        System.out.println();

        // Crear un Spliterator de n√∫meros aleatorios (como en la imagen)
        Spliterator<Integer> s1_example = new java.util.Random().ints(10, 0, 10).spliterator();

        System.out.println("C√≥digo de la imagen:");
        System.out.println("Spliterator<Integer> s1 = new Random().ints(10,0,10).spliterator();");
        System.out.println("s1.tryAdvance(v->System.out.print(v));");
        System.out.println("Spliterator s2 = s1.trySplit();");
        System.out.println("if (s2 == null) {");
        System.out.println("    System.out.println(\"Did not split\");");
        System.out.println("} else {");
        System.out.println("    s1.forEachRemaining(v->System.out.print(v));");
        System.out.println("    s2.forEachRemaining(v->System.out.print(v));");
        System.out.println("}");
        System.out.println();

        System.out.println("Ejecutando el ejemplo:");

        // Paso 1: Procesar el primer elemento
        System.out.print("1. tryAdvance(): ");
        s1_example.tryAdvance(v -> System.out.print(v));
        System.out.println();

        // Paso 2: Intentar dividir
        System.out.print("2. trySplit(): ");
        Spliterator<Integer> s2_example = s1_example.trySplit();

        if (s2_example == null) {
            System.out.println("Did not split");
        } else {
            System.out.println("Split successful");
            System.out.print("3. s1.forEachRemaining(): ");
            s1_example.forEachRemaining(v -> System.out.print(v + " "));
            System.out.println();
            System.out.print("4. s2.forEachRemaining(): ");
            s2_example.forEachRemaining(v -> System.out.print(v + " "));
            System.out.println();
        }
        System.out.println();

        // ========================================
        // 6. EXPLICACI√ìN DETALLADA DE LOS M√âTODOS
        // ========================================
        System.out.println("=== 6. EXPLICACI√ìN DETALLADA DE LOS M√âTODOS ===");

        System.out.println("üîç M√âTODO tryAdvance(Consumer<T> action):");
        System.out.println("  ‚Ä¢ ¬øQu√© hace? Intenta procesar el siguiente elemento disponible");
        System.out.println("  ‚Ä¢ ¬øCu√°ndo devuelve true? Si hay un elemento y lo procesa");
        System.out.println("  ‚Ä¢ ¬øCu√°ndo devuelve false? Si no hay m√°s elementos");
        System.out.println("  ‚Ä¢ ¬øEs destructivo? S√ç - consume el elemento procesado");
        System.out.println("  ‚Ä¢ ¬øAlternativa a? hasNext() + next() del Iterator");
        System.out.println();

        System.out.println("üîç M√âTODO trySplit():");
        System.out.println("  ‚Ä¢ ¬øQu√© hace? Intenta dividir el Spliterator en dos partes");
        System.out.println("  ‚Ä¢ ¬øCu√°ndo devuelve Spliterator? Si la divisi√≥n es exitosa");
        System.out.println("  ‚Ä¢ ¬øCu√°ndo devuelve null? Si no se puede dividir");
        System.out.println("  ‚Ä¢ ¬øEs destructivo? S√ç - modifica el Spliterator original");
        System.out.println("  ‚Ä¢ ¬øPara qu√© sirve? Procesamiento paralelo");
        System.out.println();

        System.out.println("üîç M√âTODO forEachRemaining(Consumer<T> action):");
        System.out.println("  ‚Ä¢ ¬øQu√© hace? Procesa todos los elementos restantes");
        System.out.println("  ‚Ä¢ ¬øCu√°ndo termina? Cuando no hay m√°s elementos");
        System.out.println("  ‚Ä¢ ¬øEs destructivo? S√ç - consume todos los elementos");
        System.out.println("  ‚Ä¢ ¬øAlternativa a? Todo el bucle while(iterator.hasNext())");
        System.out.println();

        // ========================================
        // 7. EJEMPLOS PR√ÅCTICOS
        // ========================================
        System.out.println("=== 7. EJEMPLOS PR√ÅCTICOS ===");

        // Ejemplo: Procesar productos por categor√≠a
        System.out.println("Ejemplo: Procesar productos por categor√≠a");
        Spliterator<Product> categorySpliterator = products.spliterator();

        System.out.println("Procesando productos uno por uno:");
        while (categorySpliterator.tryAdvance(product -> {
            if (product.getCategory().equals("Electr√≥nica")) {
                System.out.println("  üîå Electr√≥nica: " + product.getName());
            } else if (product.getCategory().equals("Bebida")) {
                System.out.println("  ü•§ Bebida: " + product.getName());
            } else {
                System.out.println("  üçï Comida: " + product.getName());
            }
        })) {
            // El bucle contin√∫a mientras tryAdvance devuelva true
        }
        System.out.println();

        // Ejemplo: Dividir y procesar en paralelo (simulado)
        System.out.println("Ejemplo: Dividir y procesar en paralelo (simulado)");
        Spliterator<Product> parallelSpliterator = products.spliterator();

        // Procesar algunos elementos
        parallelSpliterator.tryAdvance(p -> System.out.println("Procesado: " + p.getName()));

        // Dividir
        Spliterator<Product> parallelSpliterator2 = parallelSpliterator.trySplit();

        if (parallelSpliterator2 != null) {
            System.out.println("Procesando en 'hilo 1':");
            parallelSpliterator.forEachRemaining(p ->
                System.out.println("  Hilo 1: " + p.getName()));

            System.out.println("Procesando en 'hilo 2':");
            parallelSpliterator2.forEachRemaining(p ->
                System.out.println("  Hilo 2: " + p.getName()));
        }
        System.out.println();

        // ========================================
        // 8. RESUMEN
        // ========================================
        System.out.println("=== RESUMEN ===");
        System.out.println("‚Ä¢ tryAdvance(): Procesa un elemento y avanza");
        System.out.println("‚Ä¢ trySplit(): Divide el Spliterator para procesamiento paralelo");
        System.out.println("‚Ä¢ forEachRemaining(): Procesa todos los elementos restantes");
        System.out.println("‚Ä¢ Los Spliterators son la base de los Streams de Java");
        System.out.println("‚Ä¢ Permiten procesamiento eficiente y paralelo de datos");
        System.out.println("‚Ä¢ Son m√°s eficientes que los Iterators tradicionales");
    }
} 